library(here)
library(airway)
i_am("rnaseq.Rmd")
data("airway")
# The assay slot holds counts
counts_mat <- assay(airway)
head(counts_mat)
colData(airway)
# Core analysis
BiocManager::install(c("airway", "DESeq2", "clusterProfiler",
"org.Hs.eg.db", "WGCNA", "pheatmap",
"EnhancedVolcano"))
library(airway)
library(DESeq2)
library(clusterProfiler)
library(org.Hs.eg.db)
library(WGCNA)
library(pheatmap)
library(EnhancedVolcano)
data("airway")
# The assay slot holds counts
counts_mat <- assay(airway)
colData(airway)
# The assay slot holds counts
counts <- assay(airway)
coldata <- colData(airway)
librarySizes <- colSums(counts)
barplot(librarySizes, main="Library sizes per sample", las=2, cex.names=0.7)
meanCounts <- rowMeans(counts)
# Plot histogram of log2 mean counts
hist(log2(meanCounts + 1),
breaks=50,
main="Gene expression distribution BEFORE filtering",
xlab="log2(mean counts + 1)")
abline(v=log2(10), col="red", lwd=2, lty=2)   # threshold line
meanCounts <- rowMeans(counts)
dens_before <- density(log2(meanCounts + 1))
plot(dens_before,
main="Kernel density of log2 mean counts (BEFORE filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
abline(v=log2(10), col="red", lwd=2, lty=2)
legend("topright", legend=c("Before filtering","Threshold"),
col=c("blue","red"), lwd=2, lty=c(1,2))
meanCounts <- rowMeans(counts)
dens_before <- density(log2(meanCounts + 1))
plot(dens_before,
main="Kernel density of log2 mean counts (BEFORE filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
abline(v=log2(5), col="red", lwd=2, lty=2)
legend("topright", legend=c("Before filtering","Threshold"),
col=c("blue","red"), lwd=2, lty=c(1,2))
keep <- rowSums(counts >= 5) >= 2
countsFiltered <- counts[keep, ]
meanCountsFiltered <- rowMeans(countsFiltered)
dens_after <- density(log2(meanCountsFiltered + 1))
plot(dens_after,
main="Kernel density of log2 mean counts (AFTER filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="darkgreen")
abline(v=log2(10), col="red", lwd=2, lty=2)
legend("topright", legend=c("After filtering","Threshold"),
col=c("darkgreen","red"), lwd=2, lty=c(1,2))
meanCounts <- rowMeans(counts)
dens_before <- density(log2(meanCounts + 1))
plot(dens_before,
main="Kernel density of log2 mean counts (BEFORE filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
abline(v=log2(10), col="red", lwd=2, lty=2)
legend("topright", legend=c("Before filtering","Threshold"),
col=c("blue","red"), lwd=2, lty=c(1,2))
# ---- FILTERING ----
# Keep genes with >=10 counts in >=2 samples
keep <- rowSums(counts >= 10) >= 2
countsFiltered <- counts[keep, ]
meanCountsFiltered <- rowMeans(countsFiltered)
dens_after <- density(log2(meanCountsFiltered + 1))
plot(dens_after,
main="Kernel density of log2 mean counts (AFTER filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="darkgreen")
abline(v=log2(10), col="red", lwd=2, lty=2)
legend("topright", legend=c("After filtering","Threshold"),
col=c("darkgreen","red"), lwd=2, lty=c(1,2))
plot(dens_after,
main="Kernel density of log2 mean counts (AFTER filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="darkgreen")
meanCounts_before <- rowMeans(counts)
meanCounts_after  <- rowMeans(countsFiltered)
# Compute densities
dens_before <- density(log2(meanCounts_before + 1))
dens_after  <- density(log2(meanCounts_after + 1))
# Plot both curves on the same graph
plot(dens_before,
main="Kernel density of log2 mean counts\nBefore vs After Filtering",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
lines(dens_after, lwd=2, col="darkgreen")
# Add threshold line
abline(v=log2(10), col="red", lwd=2, lty=2)
# Add legend
legend("topright",
legend=c("Before filtering","After filtering","Threshold"),
col=c("blue","darkgreen","red"),
lwd=2, lty=c(1,1,2))
plot(dens_after,
main="Kernel density of log2 mean counts (AFTER filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="darkgreen")
# Compute mean counts per gene before and after filtering
meanCounts_before <- rowMeans(counts)
meanCounts_after  <- rowMeans(countsFiltered)
# Compute densities
dens_before <- density(log2(meanCounts_before + 1))
dens_after  <- density(log2(meanCounts_after + 1))
# Plot both curves on the same graph
plot(dens_before,
main="Kernel density of log2 mean counts\nBefore vs After Filtering",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
lines(dens_after, lwd=2, col="darkgreen")
# Add threshold line
abline(v=log2(10), col="red", lwd=2, lty=2)
# Add legend
legend("topright",
legend=c("Before filtering","After filtering","Threshold"),
col=c("blue","darkgreen","red"),
lwd=2, lty=c(1,1,2))
# Plot both curves on the same graph
plot(dens_before,
main="Kernel density of log2 mean counts\nBefore vs After Filtering",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
lines(dens_after, lwd=2, col="darkgreen")
# Add legend
legend("topright",
legend=c("Before filtering","After filtering"),
col=c("blue","darkgreen"),
lwd=2, lty=c(1,1))
print(dim(counts))
print(dim(counts_filtered))
keep <- rowSums(counts >= 10) >= 2
counts_filtered <- counts[keep, ]
# ---- BEFORE FILTERING ----
# Compute mean counts per gene
meanCounts <- rowMeans(counts)
dens_before <- density(log2(meanCounts + 1))
plot(dens_before,
main="Kernel density of log2 mean counts (BEFORE filtering)",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
abline(v=log2(10), col="red", lwd=2, lty=2)
legend("topright", legend=c("Before filtering","Threshold"),
col=c("blue","red"), lwd=2, lty=c(1,2))
# ---- FILTERING ----
# Keep genes with >=10 counts in >=2 samples
keep <- rowSums(counts >= 10) >= 2
counts_filtered <- counts[keep, ]
# meanCountsFiltered <- rowMeans(countsFiltered)
# dens_after <- density(log2(meanCountsFiltered + 1))
# Compute mean counts per gene before and after filtering
meanCounts_before <- rowMeans(counts)
meanCounts_after  <- rowMeans(counts_filtered)
# Compute densities
dens_before <- density(log2(meanCounts_before + 1))
dens_after  <- density(log2(meanCounts_after + 1))
# Plot both curves on the same graph
plot(dens_before,
main="Kernel density of log2 mean counts\nBefore vs After Filtering",
xlab="log2(mean counts + 1)",
lwd=2, col="blue")
lines(dens_after, lwd=2, col="darkgreen")
# Add legend
legend("topright",
legend=c("Before filtering","After filtering"),
col=c("blue","darkgreen"),
lwd=2, lty=c(1,1))
print(dim(counts))
print(dim(counts_filtered))
# -------------------------------
dds <- DESeqDataSetFromMatrix(countData = countsFiltered,
colData   = coldata,
design    = ~ cell + dex)  # adjust for cell line, test treatment
dds <- DESeq(dds)
# Normalized counts (for exploratory analysis)
normCounts <- counts(dds, normalized=TRUE)
# Compute per-sample means before and after normalization
mean_raw  <- colMeans(countsFiltered)
mean_norm <- colMeans(normCounts)
libsize   <- colSums(countsFiltered)
# Scatter: raw counts vs library size
plot(libsize, mean_raw,
xlab="Library size (total counts per sample)",
ylab="Mean raw counts per gene",
pch=16, col="blue",
main="Raw counts: sequencing depth bias")
# Scatter: normalized counts vs library size
plot(libsize, mean_norm,
xlab="Library size (total counts per sample)",
ylab="Mean normalized counts per gene",
pch=16, col="darkgreen",
main="Normalized counts: depth bias corrected")
# Compute library sizes
raw_libsize  <- colSums(countsFiltered)
norm_libsize <- colSums(normCounts)
# Combine into a matrix for plotting
libsize_mat <- rbind(Raw = raw_libsize, Normalized = norm_libsize)
# Barplot side-by-side
barplot(libsize_mat,
beside = TRUE,
col = c("skyblue", "lightgreen"),
las = 2,
ylab = "Library size (sum of counts)",
main = "Effect of normalization on library sizes")
legend("topright",
legend = rownames(libsize_mat),
fill = c("skyblue", "lightgreen"))
# Compute library sizes
raw_libsize  <- colSums(countsFiltered)
norm_libsize <- colSums(normCounts)
# Combine into one vector with labels
all_libsize <- c(raw_libsize, norm_libsize)
sample_labels <- rep(colnames(countsFiltered), 2)
group_labels  <- c(rep("Raw", length(raw_libsize)),
rep("Normalized", length(norm_libsize)))
# Barplot
barplot(all_libsize,
col = ifelse(group_labels == "Raw", "skyblue", "lightgreen"),
names.arg = paste(sample_labels, group_labels, sep = "\n"),
las = 2,
ylab = "Library size (sum of counts)",
main = "Library sizes before and after normalization")
legend("topright",
legend = c("Raw", "Normalized"),
fill = c("skyblue", "lightgreen"))
